import pandas as pd
import numpy as np
from graphviz import Digraph


def entropy(target_col):
    elements, counts = np.unique(target_col, return_counts=True)
    return -np.sum((counts / len(target_col)) * np.log2(counts / len(target_col)))

def info_gain(data, split_attribute, target_name):
    total_entropy = entropy(data[target_name])
    values, counts = np.unique(data[split_attribute], return_counts=True)
    weighted_entropy = sum(
        (counts[i] / len(data)) * entropy(data[data[split_attribute] == values[i]][target_name])
        for i in range(len(values))
    )
    return total_entropy - weighted_entropy

def id3(data, features, target_name):
    if len(np.unique(data[target_name])) == 1:
        return np.unique(data[target_name])[0]
    if not features or data.empty:
        return data[target_name].mode()[0]

    best_feature = max(features, key=lambda feature: info_gain(data, feature, target_name))
    tree = {best_feature: {}}

    for value in np.unique(data[best_feature]):
        subtree_data = data[data[best_feature] == value]
        subtree = id3(subtree_data, [f for f in features if f != best_feature], target_name)
        tree[best_feature][value] = subtree

    return tree

# Example Data
data = pd.DataFrame({
    'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain', 'Sunny', 'Overcast', 'Overcast', 'Rain'],
    'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],
    'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],
    'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Strong'],
    'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']
})

features = data.columns[:-1].tolist()
target = 'PlayTennis'

decision_tree = id3(data, features, target)
print("Decision Tree:", decision_tree)


