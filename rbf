import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import cdist
from sklearn.metrics import mean_squared_error

# Define RBF Kernel
def rbf_kernel(X, centers, sigma):
 
    return np.exp(-cdist(X, centers)**2 / (2 * sigma**2))

# Implement RBF Regression
class RBFRegression:
    def __init__(self, num_centers, sigma):
        self.num_centers = num_centers
        self.sigma = sigma
        self.centers = None
        self.weights = None

    def fit(self, X, y):
        # Step 3.1: Select RBF centers randomly
        random_indices = np.random.choice(X.shape[0], self.num_centers, replace=False)
        self.centers = X[random_indices]

        # Step 3.2: Compute RBF kernel matrix
        phi = rbf_kernel(X, self.centers, self.sigma)

        # Step 3.3: Solve for weights using the pseudo inverse
        self.weights = np.linalg.pinv(phi).dot(y)

    def predict(self, X):
        # Step 3.4: Compute RBF kernel matrix for new inputs
        phi = rbf_kernel(X, self.centers, self.sigma)
        return phi.dot(self.weights)
# Generate Data
np.random.seed(42)
X = np.linspace(-5, 5, 50).reshape(-1, 1)
y = np.sin(X).ravel() + np.random.normal(scale=0.2, size=X.shape[0])

# Train and Predict
model = RBFRegression(num_centers=10, sigma=1.0)
model.fit(X, y)
y_pred = model.predict(X)

# Plot Results
plt.scatter(X, y, color='blue', label='Data')
plt.plot(X, y_pred, color='red', label='RBF Fit')
plt.legend()
plt.show()

# Evaluate
print(f"MSE: {mean_squared_error(y, y_pred):.4f}")
